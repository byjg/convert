<?php

namespace ByJG\Convert;

class FromUTF8
{

	/**
	 * Convert a text in UTF8 to ISO-8859-1 used in emails.
	 *
	 * @param string $text
	 * @param int $wrap
	 * @return string
	 */
	public static function toIso88591Email($text, $wrap = 0)
	{
        $ISO88591_CONV = [
            194 => [
                161=>'=A1' /*¡*/, 162=>'=A2' /*¢*/, 163=>'=A3' /*£*/, 164=>'=A4' /*¤*/, 165=>'=A5' /*¥*/,
                166=>'=A6' /*¦*/, 167=>'=A7' /*§*/, 168=>'=A8' /*¨*/, 169=>'=A9' /*©*/, 170=>'=AA' /*ª*/,
                171=>'=AB' /*«*/, 172=>'=AC' /*¬*/, 173=>'=AD' /* */, 174=>'=AE' /*®*/, 175=>'=AF' /*¯*/,
                176=>'=B0' /*°*/, 177=>'=B1' /*±*/, 178=>'=B2' /*²*/, 179=>'=B3' /*³*/, 180=>'=B4' /*´*/,
                181=>'=B5' /*µ*/, 182=>'=B6' /*¶*/, 183=>'=B7' /*·*/, 184=>'=B8' /*¸*/, 185=>'=B9' /*¹*/,
                186=>'=BA' /*º*/, 187=>'=BB' /*»*/, 188=>'=BC' /*¼*/, 189=>'=BD' /*½*/, 190=>'=BE' /*¾*/,
                191=>'=BF' /*¿*/,
            ],
            195 => [
                128=>'=C0' /*À*/, 129=>'=C1' /*Á*/, 130=>'=C2' /*Â*/, 131=>'=C3' /*Ã*/, 132=>'=C4' /*Ä*/,
                133=>'=C5' /*Å*/, 134=>'=C6' /*Æ*/, 135=>'=C7' /*Ç*/, 136=>'=C8' /*È*/, 137=>'=C9' /*É*/,
                138=>'=CA' /*Ê*/, 139=>'=CB' /*Ë*/, 140=>'=CC' /*Ì*/, 141=>'=CD' /*Í*/, 142=>'=CE' /*Î*/,
                143=>'=CF' /*Ï*/, 144=>'=D0' /*Ð*/, 145=>'=D1' /*Ñ*/, 146=>'=D2' /*Ò*/, 147=>'=D3' /*Ó*/,
                148=>'=D4' /*Ô*/, 149=>'=D5' /*Õ*/, 150=>'=D6' /*Ö*/, 151=>'=D7' /*×*/, 152=>'=D8' /*Ø*/,
                153=>'=D9' /*Ù*/, 154=>'=DA' /*Ú*/, 155=>'=DB' /*Û*/, 156=>'=DC' /*Ü*/, 157=>'=DD' /*Ý*/,
                158=>'=DE' /*Þ*/, 159=>'=DF' /*ß*/, 160=>'=E0' /*à*/, 161=>'=E1' /*á*/, 162=>'=E2' /*â*/,
                163=>'=E3' /*ã*/, 164=>'=E4' /*ä*/, 165=>'=E5' /*å*/, 166=>'=E6' /*æ*/, 167=>'=E7' /*ç*/,
                168=>'=E8' /*è*/, 169=>'=E9' /*é*/, 170=>'=EA' /*ê*/, 171=>'=EB' /*ë*/, 172=>'=EC' /*ì*/,
                173=>'=ED' /*í*/, 174=>'=EE' /*î*/, 175=>'=EF' /*ï*/, 176=>'=F0' /*ð*/, 177=>'=F1' /*ñ*/,
                178=>'=F2' /*ò*/, 179=>'=F3' /*ó*/, 180=>'=F4' /*ô*/, 181=>'=F5' /*õ*/, 182=>'=F6' /*ö*/,
                183=>'=F7' /*÷*/, 184=>'=F8' /*ø*/, 185=>'=F9' /*ù*/, 186=>'=FA' /*ú*/, 187=>'=FB' /*û*/,
                188=>'=FC' /*ü*/, 189=>'=FD' /*ý*/, 190=>'=FE' /*þ*/, 191=>'=FF' /*ÿ*/,
            ],
            197 => [
                169=>'u' /*ũ*/,
                168=>'U' /*Ũ*/,
            ]
        ];

		$textPre = str_replace("=", "=3D", $text);
		$result = FromUTF8::baseConversion($ISO88591_CONV, $textPre);
		if ($result == $textPre) {
            return $text;
        } else {
            $result = str_replace(" ", "_", $result);
        }

        if ($wrap == 0) {
            return "=?iso-8859-1?Q?" . $result . "?=";
        } else {
            $newResult = "=?iso-8859-1?Q?";
            $contaLinha = 0;
            $lenResult = strlen($result);
            for ($i = 0; $i < $lenResult; $i++) {
                if (($result[$i] == "=") && ($contaLinha >= ($wrap - 3)) || ($contaLinha >= $wrap)) {
                    $newResult .= "?=\r\n=?iso-8859-1?Q?" . $result[$i];
                    $contaLinha = 0;
                } else {
                    $newResult .= $result[$i];
                }


                $contaLinha++;
            }
            $newResult .= "?=";
            return $newResult;
        }
    }

	/**
	 * Remove all accents from UTF8 Chars.
	 *
	 * @param string $text
	 * @return string
	 */
	public static function removeAccent($text)
	{
		$ASCII_CONV = [
            194 => [
                161=>'!' /*¡*/, 162=>'C' /*¢*/, 163=>'pound' /*£*/, 164=>'currency' /*¤*/, 165=>'yen' /*¥*/,
                166=>'|' /*¦*/, 167=>'section' /*§*/, 168=>'"' /*¨*/, 169=>'(C)' /*©*/, 170=>'a.' /*ª*/,
                171=>'<<' /*«*/, 172=>'-' /*¬*/, 173=>' ' /**/, 174=>'(R)' /*®*/, 175=>'-' /*¯*/,
                176=>'o.' /*°*/, 177=>'+-' /*±*/, 178=>'2' /*²*/, 179=>'3' /*³*/, 180=>'`' /*´*/,
                181=>'micro' /*µ*/, 182=>'paragraph' /*¶*/, 183=>'.' /*·*/, 184=>',' /*¸*/, 185=>'1' /*¹*/,
                186=>'0.' /*º*/, 187=>'>>' /*»*/, 188=>'1/4' /*¼*/, 189=>'1/2' /*½*/, 190=>'3/4' /*¾*/,
                191=>'?' /*¿*/,
            ],
            195 => [
                128=>'A' /*À*/, 129=>'A' /*Á*/, 130=>'A' /*Â*/, 131=>'A' /*Ã*/, 132=>'A' /*Ä*/,
                133=>'A' /*Å*/, 134=>'AE' /*Æ*/, 135=>'C' /*Ç*/, 136=>'E' /*È*/, 137=>'E' /*É*/,
                138=>'E' /*Ê*/, 139=>'E' /*Ë*/, 140=>'I' /*Ì*/, 141=>'I' /*Í*/, 142=>'I' /*Î*/,
                143=>'I' /*Ï*/, 144=>'D' /*Ð*/, 145=>'N' /*Ñ*/, 146=>'O' /*Ò*/, 147=>'O' /*Ó*/,
                148=>'O' /*Ô*/, 149=>'O' /*Õ*/, 150=>'O' /*Ö*/, 151=>'x' /*×*/, 152=>'0' /*Ø*/,
                153=>'U' /*Ù*/, 154=>'U' /*Ú*/, 155=>'U' /*Û*/, 156=>'U' /*Ü*/, 157=>'Y' /*Ý*/,
                158=>'P' /*Þ*/, 159=>'B' /*ß*/, 160=>'a' /*à*/, 161=>'a' /*á*/, 162=>'a' /*â*/,
                163=>'a' /*ã*/, 164=>'a' /*ä*/, 165=>'a' /*å*/, 166=>'ae' /*æ*/, 167=>'c' /*ç*/,
                168=>'e' /*è*/, 169=>'e' /*é*/, 170=>'e' /*ê*/, 171=>'e' /*ë*/, 172=>'i' /*ì*/,
                173=>'i' /*í*/, 174=>'i' /*î*/, 175=>'i' /*ï*/, 176=>'o' /*ð*/, 177=>'n' /*ñ*/,
                178=>'o' /*ò*/, 179=>'o' /*ó*/, 180=>'o' /*ô*/, 181=>'o' /*õ*/, 182=>'o' /*ö*/,
                183=>'/' /*÷*/, 184=>'0' /*ø*/, 185=>'u' /*ù*/, 186=>'u' /*ú*/, 187=>'u' /*û*/,
                188=>'u' /*ü*/, 189=>'y' /*ý*/, 190=>'p' /*þ*/, 191=>'y' /*ÿ*/,
            ],
            197 => [
                169=>'u' /*ũ*/, 168=>'U' /*Ũ*/,
            ]
        ];

		return FromUTF8::baseConversion($ASCII_CONV, $text);
	}

    /**
     * Convert a text in UTF8 to ascii html entities
     *
     * @param string $text
     * @return string
     */
	public static function toHtmlEntities($text)
	{
		$ASCII_CONV = [
            194 => [
                161=>'&iexcl;'  /*¡*/, 162=>'&cent;'   /*¢*/, 163=>'&pound;'  /*£*/, 164=>'&curren;' /*¤*/, 165=>'&yen;' /*¥*/,
                166=>'&brvbar;' /*¦*/, 167=>'&sect;'   /*§*/, 168=>'&uml;'    /*¨*/, 169=>'&copy;'   /*©*/, 170=>'&ordf;' /*ª*/,
                171=>'&laquo;'  /*«*/, 172=>'&not;'    /*¬*/, 173=>'&shy;'    /* */, 174=>'&reg;'    /*®*/, 175=>'&macr;' /*¯*/,
                176=>'&deg;'    /*°*/, 177=>'&plusmn;' /*±*/, 178=>'&sup2;'   /*²*/, 179=>'&sup3;'   /*³*/, 180=>'&acute;' /*´*/,
                181=>'&micro;'  /*µ*/, 182=>'&para;'   /*¶*/, 183=>'&middot;' /*·*/, 184=>'&cedil;'  /*¸*/, 185=>'&sup1;' /*¹*/,
                186=>'&ordm;'   /*º*/, 187=>'&raquo;'  /*»*/, 188=>'&frac14;' /*¼*/, 189=>'&frac12;' /*½*/, 190=>'&frac34;' /*¾*/,
                191=>'&iquest;' /*¿*/,
            ],
            195 => [
                128=>'&Agrave;' /*À*/, 129=>'&Aacute;' /*Á*/, 130=>'&Acirc;'  /*Â*/, 131=>'&Atilde;' /*Ã*/, 132=>'&Auml;'   /*Ä*/,
                133=>'&Aring;'  /*Å*/, 134=>'&AElig;'  /*Æ*/, 135=>'&Ccedil;' /*Ç*/, 136=>'&Egrave;' /*È*/, 137=>'&Eacute;' /*É*/,
                138=>'&Ecirc;'  /*Ê*/, 139=>'&Euml;'   /*Ë*/, 140=>'&Igrave;' /*Ì*/, 141=>'&Iacute;' /*Í*/, 142=>'&Icirc;'  /*Î*/,
                143=>'&Iuml;'   /*Ï*/, 144=>'&ETH;'    /*Ð*/, 145=>'&Ntilde;' /*Ñ*/, 146=>'&Ograve;' /*Ò*/, 147=>'&Oacute;' /*Ó*/,
                148=>'&Ocirc;'  /*Ô*/, 149=>'&Otilde;' /*Õ*/, 150=>'&Ouml;'   /*Ö*/, 151=>'&times;'  /*×*/, 152=>'&Oslash;' /*Ø*/,
                153=>'&Ugrave;' /*Ù*/, 154=>'&Uacute;' /*Ú*/, 155=>'&Ucirc;'  /*Û*/, 156=>'&Uuml;'   /*Ü*/, 157=>'&Yacute;' /*Ý*/,
                158=>'&THORN;'  /*Þ*/, 159=>'&szlig;'  /*ß*/, 160=>'&agrave;' /*à*/, 161=>'&aacute;' /*á*/, 162=>'&acirc;'  /*â*/,
                163=>'&atilde;' /*ã*/, 164=>'&auml;'   /*ä*/, 165=>'&aring;'  /*å*/, 166=>'&aelig;'  /*æ*/, 167=>'&ccedil;' /*ç*/,
                168=>'&egrave;' /*è*/, 169=>'&eacute;' /*é*/, 170=>'&ecirc;'  /*ê*/, 171=>'&euml;'   /*ë*/, 172=>'&igrave;' /*ì*/,
                173=>'&iacute;' /*í*/, 174=>'&icirc;'  /*î*/, 175=>'&iuml;'   /*ï*/, 176=>'&eth;'    /*ð*/, 177=>'&ntilde;' /*ñ*/,
                178=>'&ograve;' /*ò*/, 179=>'&oacute;' /*ó*/, 180=>'&ocirc;'  /*ô*/, 181=>'&otilde;' /*õ*/, 182=>'&ouml;'   /*ö*/,
                183=>'&divide;' /*÷*/, 184=>'&oslash;' /*ø*/, 185=>'&ugrave;' /*ù*/, 186=>'&uacute;' /*ú*/, 187=>'&ucirc;'  /*û*/,
                188=>'&uuml;'   /*ü*/, 189=>'&yacute;' /*ý*/, 190=>'&thorn;'  /*þ*/, 191=>'&yuml;'   /*ÿ*/,
            ],
            197 => [
                169=>'&utilde;' /*ũ*/, 168=>'&Utilde;' /*Ũ*/,
            ]
        ];

		return FromUTF8::baseConversion($ASCII_CONV, $text);
	}

	/**
	 * Base conversion
	 *
	 * @param string[] $vector
	 * @param string $text
	 * @return string
	 */
	protected static function baseConversion($vector, $text)
	{
		$result = "";
        $lenText = strlen($text);
		for ($i=0; $i<$lenText; $i++)
		{
			if (ord($text[$i])==194 || ord($text[$i])==195 || ord($text[$i])==197)
			{
                $first = ord($text[$i++]);
				$result .= $vector[$first][ord($text[$i])];
			}
			else
			{
				$result .= $text[$i];
			}
		}

		return $result;
	}
}
